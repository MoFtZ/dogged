name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v1
      name: 'Checkout'
    - uses: gittools/actions/gitversion/setup@v0.9.6
      with:
        versionSpec: '5.x'
      name: 'Setup GitVersion'
    - run: |
        $version = dotnet-gitversion /UpdateAssemblyInfo | ConvertFrom-Json
        Write-Output ("BUILD_NUMBER=" + $version.LegacySemVer) >> $Env:GITHUB_ENV
      name: 'Update Version'
      shell: pwsh
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.103
      name: 'Setup .NET Core 3.0'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.404
      name: 'Setup .NET Core 3.1'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
      name: 'Setup .NET 5.0'
    - run: |
        dotnet restore
        dotnet build --no-restore --configuration Release
      name: Build
    - run: |
        set +e
        dotnet test Dogged.Tests/Dogged.Tests.csproj --no-build --configuration Release --logger "trx;LogFileName=Dogged.Tests.trx"
        ret=$(($ret + $?))
        dotnet test Dogged.Native.Tests/Dogged.Native.Tests.csproj --no-build --configuration Release --logger "trx;LogFileName=Dogged.Native.Tests.trx"
        ret=$(($ret + $?))
        exit $ret
      shell: bash
      name: Test
#    - run: |
#        mkdir ${{ github.workspace }}\package
#        dotnet pack --no-build -c Release --output "${{ github.workspace }}\package" "-p:Version=${{ env.BUILD_VERSION }}" "-p:PackageVersion=${{ env.BUILD_VERSION }}"
#      shell: pwsh
#      name: Package
#      if: matrix.os == 'windows-latest' && matrix.dotnet.framework == 'netcoreapp3.1'
#    - uses: actions/upload-artifact@v1
#      with:
#        name: nuget
#        path: ${{ github.workspace }}/package
#      if: matrix.os == 'windows-latest'
#      name: 'Upload Package'
